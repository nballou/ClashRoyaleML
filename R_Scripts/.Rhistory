calc_avg_elixir <- function() {
data$left_elixir_cost <- 0
data$right_elixir_cost <- 0
for (i in 1:74) {
card_name_L <- paste("^", all_cards[i], "_L", "$", sep = "")
card_name_R <- paste("^", all_cards[i], "_R", "$", sep = "")
col_index_L <- grep(card_name_L, colnames(data))[1]
col_index_R <- grep(card_name_R, colnames(data))[1]
print(c(card_name_L,col_index_L))
ifelse(data[,col_index_L == 1], data$left_elixir_cost+costs[i],data$left_elixir_cost)
ifelse(data[,col_index_R == 1], data$left_elixir_cost+costs[i],data$left_elixir_cost)
# if (data[,col_index_L] == 1) {
#   data$left_elixir_cost <- data$left_elixir_cost+costs[i]
# }
# if (data[,col_index_R] == 1) {
#   data$right_elixir_cost <- data$right_elixir_cost+costs[i]
# }
print(c(i,data$left_elixir_cost[i],data$right_elixir_cost[i]))
}
calc_avg_elixir()
calc_avg_elixir <- function() {
data$left_elixir_cost <- 0
data$right_elixir_cost <- 0
for (i in 1:74) {
card_name_L <- paste("^", all_cards[i], "_L", "$", sep = "")
card_name_R <- paste("^", all_cards[i], "_R", "$", sep = "")
col_index_L <- grep(card_name_L, colnames(data))[1]
col_index_R <- grep(card_name_R, colnames(data))[1]
print(c(card_name_L,col_index_L))
ifelse(data[,col_index_L == 1], data[,327]+costs[i],data[,327])
ifelse(data[,col_index_R == 1], data[,328]+costs[i],data[,328])
# if (data[,col_index_L] == 1) {
#   data$left_elixir_cost <- data$left_elixir_cost+costs[i]
# }
# if (data[,col_index_R] == 1) {
#   data$right_elixir_cost <- data$right_elixir_cost+costs[i]
# }
print(c(i,data$left_elixir_cost[i],data$right_elixir_cost[i]))
}
calc_avg_elixir()
calc_avg_elixir <- function() {
data$left_elixir_cost <- 0
data$right_elixir_cost <- 0
for (i in 1:74) {
card_name_L <- paste("^", all_cards[i], "_L", "$", sep = "")
card_name_R <- paste("^", all_cards[i], "_R", "$", sep = "")
col_index_L <- grep(card_name_L, colnames(data))[1]
col_index_R <- grep(card_name_R, colnames(data))[1]
print(c(card_name_L,col_index_L))
data$left_elixir_cost <- ifelse(data[,col_index_L == 1], data_left_elixir_cost+costs[i],data$left_elixir_cost)
data$right_elixir_cost <- ifelse(data[,col_index_R == 1], data_right_elixir_cost+costs[i],data$right_elixir_cost)
# if (data[,col_index_L] == 1) {
#   data$left_elixir_cost <- data$left_elixir_cost+costs[i]
# }
# if (data[,col_index_R] == 1) {
#   data$right_elixir_cost <- data$right_elixir_cost+costs[i]
# }
print(c(i,data$left_elixir_cost[i],data$right_elixir_cost[i]))
}
calc_avg_elixir()
calc_avg_elixir <- function() {
data$left_elixir_cost <- 0
data$right_elixir_cost <- 0
for (i in 1:74) {
card_name_L <- paste("^", all_cards[i], "_L", "$", sep = "")
card_name_R <- paste("^", all_cards[i], "_R", "$", sep = "")
col_index_L <- grep(card_name_L, colnames(data))[1]
col_index_R <- grep(card_name_R, colnames(data))[1]
print(c(card_name_L,col_index_L))
data$left_elixir_cost <- ifelse(data[,col_index_L] == 1, data_left_elixir_cost+costs[i],data$left_elixir_cost)
data$right_elixir_cost <- ifelse(data[,col_index_R] == 1, data_right_elixir_cost+costs[i],data$right_elixir_cost)
# if (data[,col_index_L] == 1) {
#   data$left_elixir_cost <- data$left_elixir_cost+costs[i]
# }
# if (data[,col_index_R] == 1) {
#   data$right_elixir_cost <- data$right_elixir_cost+costs[i]
# }
print(c(i,data$left_elixir_cost[i],data$right_elixir_cost[i]))
}
calc_avg_elixir()
calc_avg_elixir <- function() {
data$left_elixir_cost <- 0
data$right_elixir_cost <- 0
for (i in 1:74) {
card_name_L <- paste("^", all_cards[i], "_L", "$", sep = "")
card_name_R <- paste("^", all_cards[i], "_R", "$", sep = "")
col_index_L <- grep(card_name_L, colnames(data))[1]
col_index_R <- grep(card_name_R, colnames(data))[1]
print(c(card_name_L,col_index_L))
data$left_elixir_cost <- ifelse(data[,col_index_L] == 1, data$left_elixir_cost+costs[i],data$left_elixir_cost)
data$right_elixir_cost <- ifelse(data[,col_index_R] == 1, data$right_elixir_cost+costs[i],data$right_elixir_cost)
# if (data[,col_index_L] == 1) {
#   data$left_elixir_cost <- data$left_elixir_cost+costs[i]
# }
# if (data[,col_index_R] == 1) {
#   data$right_elixir_cost <- data$right_elixir_cost+costs[i]
# }
print(c(i,data$left_elixir_cost[i],data$right_elixir_cost[i]))
}
calc_avg_elixir()
View(data)
summary(data$left_elixir_cost)
calc_avg_elixir <- function() {
data$left_elixir_cost <- 0
data$right_elixir_cost <- 0
for (i in 1:74) {
card_name_L <- paste("^", all_cards[i], "_L", "$", sep = "")
card_name_R <- paste("^", all_cards[i], "_R", "$", sep = "")
col_index_L <- grep(card_name_L, colnames(data))[1]
col_index_R <- grep(card_name_R, colnames(data))[1]
print(c(card_name_L,col_index_L))
data$left_elixir_cost <- ifelse(data[,col_index_L] == 1, data$left_elixir_cost+costs[i],data$left_elixir_cost)
data$right_elixir_cost <- ifelse(data[,col_index_R] == 1, data$right_elixir_cost+costs[i],data$right_elixir_cost)
# if (data[,col_index_L] == 1) {
#   data$left_elixir_cost <- data$left_elixir_cost+costs[i]
# }
# if (data[,col_index_R] == 1) {
#   data$right_elixir_cost <- data$right_elixir_cost+costs[i]
# }
print(data$left_elixir_cost)
}
calc_avg_elixir()
View(data)
calc_avg_elixir <- function() {
data$left_elixir_cost <- 0
data$right_elixir_cost <- 0
for (i in 1:74) {
card_name_L <- paste("^", all_cards[i], "_L", "$", sep = "")
card_name_R <- paste("^", all_cards[i], "_R", "$", sep = "")
col_index_L <- grep(card_name_L, colnames(data))[1]
col_index_R <- grep(card_name_R, colnames(data))[1]
print(c(card_name_L,col_index_L))
data$left_elixir_cost <- ifelse(data[,col_index_L] == 1, data$left_elixir_cost+costs[i],data$left_elixir_cost)
data$right_elixir_cost <- ifelse(data[,col_index_R] == 1, data$right_elixir_cost+costs[i],data$right_elixir_cost)
# if (data[,col_index_L] == 1) {
#   data$left_elixir_cost <- data$left_elixir_cost+costs[i]
# }
# if (data[,col_index_R] == 1) {
#   data$right_elixir_cost <- data$right_elixir_cost+costs[i]
# }
print(data$left_elixir_cost[1])
}
calc_avg_elixir()
View(data)
data$left_elixir_cost <- 0
data$right_elixir_cost <- 0
calc_avg_elixir <- function() {
for (i in 1:74) {
card_name_L <- paste("^", all_cards[i], "_L", "$", sep = "")
card_name_R <- paste("^", all_cards[i], "_R", "$", sep = "")
col_index_L <- grep(card_name_L, colnames(data))[1]
col_index_R <- grep(card_name_R, colnames(data))[1]
print(c(card_name_L,col_index_L))
data$left_elixir_cost <- ifelse(data[,col_index_L] == 1, data$left_elixir_cost+costs[i],data$left_elixir_cost)
data$right_elixir_cost <- ifelse(data[,col_index_R] == 1, data$right_elixir_cost+costs[i],data$right_elixir_cost)
print(data$left_elixir_cost[1])
}
calc_avg_elixir()
summary(data$left_elixir_cost)
calc_avg_elixir <- function() {
for (i in 1:74) {
card_name_L <- paste("^", all_cards[i], "_L", "$", sep = "")
card_name_R <- paste("^", all_cards[i], "_R", "$", sep = "")
col_index_L <- grep(card_name_L, colnames(data))[1]
col_index_R <- grep(card_name_R, colnames(data))[1]
print(c(card_name_L,col_index_L))
data$left_elixir_cost <- ifelse(data[,col_index_L] == 1, data$left_elixir_cost+costs[i],data$left_elixir_cost)
data$right_elixir_cost <- ifelse(data[,col_index_R] == 1, data$right_elixir_cost+costs[i],data$right_elixir_cost)
print(data$left_elixir_cost[2])
}
calc_avg_elixir()
calc_avg_elixir <- function(df) {
for (i in 1:74) {
card_name_L <- paste("^", all_cards[i], "_L", "$", sep = "")
card_name_R <- paste("^", all_cards[i], "_R", "$", sep = "")
col_index_L <- grep(card_name_L, colnames(df))[1]
col_index_R <- grep(card_name_R, colnames(df))[1]
print(c(card_name_L,col_index_L))
df$left_elixir_cost <- ifelse(df[,col_index_L] == 1, df$left_elixir_cost+costs[i],df$left_elixir_cost)
df$right_elixir_cost <- ifelse(df[,col_index_R] == 1, df$right_elixir_cost+costs[i],df$right_elixir_cost)
print(df$left_elixir_cost[2])
}
data$left_elixir_cost <- 0
data$right_elixir_cost <- 0
calc_avg_elixir <- function(df) {
for (i in 1:74) {
card_name_L <- paste("^", all_cards[i], "_L", "$", sep = "")
card_name_R <- paste("^", all_cards[i], "_R", "$", sep = "")
col_index_L <- grep(card_name_L, colnames(df))[1]
col_index_R <- grep(card_name_R, colnames(df))[1]
print(c(card_name_L,col_index_L))
df$left_elixir_cost <- ifelse(df[,col_index_L] == 1, df$left_elixir_cost+costs[i],df$left_elixir_cost)
df$right_elixir_cost <- ifelse(df[,col_index_R] == 1, df$right_elixir_cost+costs[i],df$right_elixir_cost)
print(df$left_elixir_cost[2])
}
calc_avg_elixir(data)
summary(data$left_elixir_cost)
calc_avg_elixir <- function(df) {
for (i in 1:74) {
card_name_L <- paste("^", all_cards[i], "_L", "$", sep = "")
card_name_R <- paste("^", all_cards[i], "_R", "$", sep = "")
col_index_L <- grep(card_name_L, colnames(df))[1]
col_index_R <- grep(card_name_R, colnames(df))[1]
print(c(card_name_L,col_index_L))
df$left_elixir_cost <- ifelse(df[,col_index_L] == 1, df$left_elixir_cost+costs[i],df$left_elixir_cost)
df$right_elixir_cost <- ifelse(df[,col_index_R] == 1, df$right_elixir_cost+costs[i],df$right_elixir_cost)
print(df$left_elixir_cost[2])
}
return(df)
}
data <- calc_avg_elixir(data)
summary(data$left_elixir_cost)
data <- data %>%
subset(-X, -X.1)
data <- data %>%
select(-X, -X.1)
View(data)
write.csv(data, file = "processed_data.csv")
getw()
getwd()
rm(right_big_upsets, right_upsets)
rm(rw,x,spongbob,lw,left_upsets,left_big_upsets,data2,y2)
rm(rw,x,spongebob,lw,left_upsets,left_big_upsets,data2,y2)
# Barplot of Winrates
p_winrate <- ggplot(data=winrates, aes(x = reorder(Card, -Winrate), y = Use_rate, fill = reorder(Card, -Winrate))) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 90, hjust = 1), plot.title = element_text(size = 24, face = "bold", hjust = 0.5)) +
ggtitle("Userate by Card") +
labs(fill = "Card Name") +
xlab("Card Name") +
coord_cartesian(ylim = c(0,0.46))
library(ggplot2)
# Barplot of Userate, ordered in the same way as winrate
p_userate2 <- ggplot(data = winrates, aes(x = reorder(Card, -Winrate), y = Use_rate, fill = reorder(Card, -Winrate))) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 90, hjust = 1), plot.title = element_text(size = 24, face = "bold", hjust = 0.5)) +
ggtitle("Userate by Card") +
labs(fill = "Card Name") +
xlab("Card Name") +
coord_cartesian(ylim = c(0,0.46))
addSmallLegend(p_userate2, pointSize = 5, textSize = 11, spaceLegend = 1)
setwd("~/Desktop/Desktop Files/IGGI/Modules/Methods 2")
logreg <- read.csv("logreg_q20.csv")
View(logreg)
anova(logreg$x, logreg$test.acc)
typeof(d$X)
anova(logreg$X, logreg$test.acc)
anova(as.factor(logreg$X), logreg$test.acc)
?anova
lm(logreg$X ~ logreg$test.acc)
m1 <- lm(logreg$X ~ logreg$test.acc)
anova(m1)
m1 <- lm(logreg$test.acc ~ as.factor(logreg$X))
anova(m1)
m1 <- lm(logreg$test.acc ~ logreg$X)
anova(m1)
plot(logreg$test.acc ~ logreg$avg)
abline(lm(logreg$test.acc ~ logreg$avg))
bin_res <- read.csv("../data_clean/logreg_q20_pred.csv")
View(bin_res)
bin_rest %>% group_by(bin)
library(tidyverse)
chisq.test(bin_res$correct, bin_res$bin)
install.packages("rmngb")
install.packages("RVAideMemoire")
install.packages("fifer")
library(RVAideMemoire)
?chisq.multcomp
?p.adjust
chisq.multcomp(bin_res$correct, bin_res$bin, p.adjust = "holm")
chisq.multcomp(bin_res$correct, bin_res$bin, p.adjust.method = "holm")
chisq.multcomp(bin_res$correct, bin_res$bin, p.method = "holm")
counts <- c(49,30,63,59)
chisq.test(counts)
chisq.multcomp(counts)
chisq.test(bin_res$correct[bin_res$bin == 0], bin_res$correct[bin_res$bin == 1])
nrow(bin_res$correct[bin_res$bin == 0])
nrow(bin_res$correct[bin_res$bin == 0,])
summary(bin_res$correct[bin_res$bin == 0])
length(bin_res$correct[bin_res$bin == 0,])
length(bin_res$correct[bin_res$bin == 0])
length(bin_res$correct[bin_res$bin == 1])
table(bin_res$correct, bin_res$bin)
table(bin_res$correct/length(bin_res), bin_res$bin)
kruskal.test(correct ~ bin, data = bin_res)
pairwise.wilcox.test(bin_res$correct, bin_res$bin,
p.adjust.method = "BH")
?pairwise.wilcox.test
pairwise.wilcox.test(bin_res$correct, bin_res$bin,
p.adjust.method = "none")
summary_stats <- read.csv("../data_clean_logreg_q20_stats.csv")
summary_stats <- read.csv("../data_clean/logreg_q20_stats.csv")
View(summary_stats)
barplot(bin_res$correct, bin_res$bin)
table(bin_res$correct, bin_res$bin)
install.packages("chisq.posthoc.test")
library(chisq.posthoc.test)
chisq.posthoc.test(bin_res$correct, bin_res$bin)
View(summary_stats)
chisq.test(summary_stats$test.acc, summary_stats$X)
barplot(summary_stats$test.acc, summary_stats$X)
barplot(summary_stats$test.acc, summary_stats$X, xlim = (.5,.65))
barplot(summary_stats$test.acc, summary_stats$X, xlim = c(.5,.65))
barplot(summary_stats$test.acc, summary_stats$X, xlim = .65))
barplot(summary_stats$test.acc, summary_stats$X, xlim = .65)
barplot(summary_stats$test.acc, summary_stats$X, xlim = (.5,.65))
barplot(summary_stats$test.acc, summary_stats$X, xlim = c(.5,.65))
?data.table
?table
test <- table(bin_res$correct)
test <- table(bin_res$correct, bin_res$bin)
test
?dplyr::summarise
summarise(bin_res$correct)
?tally
dt <- bin_res %>%
group_by(bin) %>%
tally()
View(dt)
dt <- bin_res %>%
group_by(bin) %>%
tally(correct)
dt <- bin_res %>%
group_by(bin) %>%
tally(correct)
View(dt)
bin_res$incorrect <- ifelse(bin_res$correct == 1, 0, 1)
dt <- bin_res %>%
group_by(bin) %>%
tally(correct, incorrect)
bin_res$incorrect <- ifelse(bin_res$correct == 1, 0, 1)
dt <- bin_res %>%
group_by(bin) %>%
tally(correct, incorrect)
dt <- bin_res %>%
group_by(bin) %>%
tally(correct) %>%
tally(incorrect)
bin_res$incorrect <- ifelse(bin_res$correct == 1, 0, 1)
View(bin_res)
?count
dt <- bin_res %>%
group_by(bin) %>%
count(correct) %>%
count(incorrect)
dt <- bin_res %>%
group_by(bin) %>%
count(correct)
View(dt)
dt <- bin_res %>%
count(correct)
View(dt)
dt <- bin_res %>%
group_by(bin) %>%
count(correct)
View(dt)
library(plyr)
library(dplyr)
count(bin_res, vars=c("bin","correct")
)
table(count(bin_res, vars=c("bin","correct")))
summary(count(bin_res, vars=c("bin","correct")))
count(bin_res, vars=c("bin","correct"))
data.table(count(bin_res, vars=c("bin","correct")))
a
a<-data_frame(id=c(rep("A",100),rep("B",78),rep("C",50)),
vall=c(rep("x",100),rep("y",78),rep("x",50)),
val=runif(228))
View(a)
library(tidyverse)
a %>% group_by(id) %>% count(vall) %>% group_by(vall) %>% count()
a<-data_frame(id=c(rep("A",100),rep("B",78),rep("C",50)),
vall=c(rep("x",100),rep("y",78),rep("x",50)),
val=runif(228))
a %>% group_by(id) %>% count(vall) %>% group_by(vall) %>% count()
sum(bin_res$correct == 1)
aggregate(bin_res$correct, by=list(bin=bin_res$bin), FUN=sum)
?aggregate
incorrect <- aggregate(bin_res$incorrect, by=list(bin=bin_res$bin), FUN=sum)
cbind(correct,incorrect)
correct <- aggregate(bin_res$correct, by=list(bin=bin_res$bin), FUN=sum)
cbind(correct,incorrect)
?cbind
table <- cbind(correct,incorrect$x)
colnames(table) <- c("bin","correct","incorrect")
View(table)
chisq.test(table)
chisq.posthoc.test(table)
pairwise.wilcox.test(bin_res$correct, bin_res$bin,
p.adjust.method = "none")
table$total <- table$correct + table$incorrect
View(table)
t(table)
chisq.test(table)
chisq.test(t(table))
chisq.test(table$correct, table$bin)
prop.test(table)
?prop.test
prop.test(table$correct, table$incorrect)
library(car)
model <- glm(correct ~ bin, data=bin_res, family=binomial(logit))
Anova(model)
install.packages("lsmeans")
library(lsmeans)
lsmeans(model, pairwise ~ bin)
lsmeans(model, pairwise ~ bin, type = "response")
Anova(model)
(tab <- table(bin_res$correct, bin_res$bin))
tab <- table(bin_res$correct, bin_res$bin)
tab
prop_tab <- round(prop.table(tab, 2), 3)
prop_tab
prop.table
?prop.table
prop_tab <- round(prop.table(tab), 3)
prop_tab
prop_tab <- prop.table(tab)
prop_tab
(prop_tab <- prop.table(tab, 2))
chisq.test(tab)
chisq.test(prop_tab)
chisq.test(prop.table(tab))
model <- glm(cbind(correct, incorrect) ~ bin, data=tab, family=binomial(logit))
model <- glm(cbind(correct, incorrect) ~ bin, data=bin_res, family=binomial(logit))
Anova(model)
lsmeans(model, pairwise ~ bin, type = "response")
anova(model)
lsmeans(model, pairwise ~ bin)
tab
tab <- data.frame(table(bin_res$correct, bin_res$bin))
View(tab)
View(table)
correct <- aggregate(bin_res$correct, by=list(bin=bin_res$bin), FUN=sum)
incorrect <- aggregate(bin_res$incorrect, by=list(bin=bin_res$bin), FUN=sum)
table <- cbind(correct,incorrect$x)
table$total <- table$correct + table$incorrect
colnames(table) <- c("bin","correct","incorrect")
# Make contingency table
correct <- aggregate(bin_res$correct, by=list(bin=bin_res$bin), FUN=sum)
incorrect <- aggregate(bin_res$incorrect, by=list(bin=bin_res$bin), FUN=sum)
table <- cbind(correct,incorrect$x)
table$total <- table$correct + table$incorrect
View(table)
View(incorrect)
colnames(table) <- c("bin","correct","incorrect")
table$total <- table$correct + table$incorrect
View(table)
table$bin <- as.factor(table$bin)
View(tab)
View(table)
t(table)
mean(table$correct)
# First test
chisq.test(bin_res$correct, bin_res$bin)
pairwiseNominalIndependence(table,
fisher = FALSE,
gtest  = FALSE,
chisq  = TRUE,
method = "fdr")
library(rcompanion)
pairwiseNominalIndependence(table,
fisher = FALSE,
gtest  = FALSE,
chisq  = TRUE,
method = "fdr")
pairwiseNominalIndependence(cbind(bin_res$correct, as.factor(bin_res$X)),
fisher = FALSE,
gtest  = FALSE,
chisq  = TRUE,
method = "fdr")
pairwiseNominalIndependence(cbind(bin_res$correct, bin_res$X),
fisher = FALSE,
gtest  = FALSE,
chisq  = TRUE,
method = "fdr")
cbind(bin_res$correct, bin_res$X)
pairwiseNominalIndependence(cbind(bin_res$correct, bin_res$incorrect),
fisher = FALSE,
gtest  = FALSE,
chisq  = TRUE,
method = "fdr")
View(table)
as.matrix(table)
x <- as.matrix(table)
View(x)
# Example
Input =("
County               Pass   Fail
Bloom                21      5
Cobblestone           6     11
Dougal                7      8
Heimlich             27      5
")
Matrix = as.matrix(read.table(textConnection(Input),
header=TRUE,
row.names=1))
Matrix
View(Matrix)
table <- data.frame(table, row.names = 1)
View(table)
table$total <- NULL
View(table)
pairwiseNominalIndependence(table,
fisher = FALSE,
gtest  = FALSE,
chisq  = TRUE,
method = "fdr")
pairwiseNominalIndependence(as.matrix(table),
fisher = FALSE,
gtest  = FALSE,
chisq  = TRUE,
method = "fdr")
